Description of files in the directory

bbox                
  Bounding box implementation
bvh
  Bounding Volume Hierarchy creation code. Creates a 
  BVH tree and if flattens it to an array.
  Based on algorith from "Physically based Rendering,
  2nd edition"
camera
  Controls camera position, orientation and related
  matrices (Projection and View).
  Includes methods for moving, zooming and changing
  orientation.
cl_device
  Obtains information about OpenCL devices in the
  system
cl_platform
  Obtains information about OpenCL platforms in the
  system
clkernelmanager
   Encapsulates OpenCL initialization and functions. 
   Also loads and compiles a kernel.
config
  Configuration and scene descripton values
configloader
  Initialization of "Config.hpp" values. Reads and
  parses configuration files.
deferredshader
  Renders the scene using OpenGL deferred shader
  algorithm. No OpenCL involved.
  One of the two alternative methods implemented
  (the other one is hybridshader)
hybridshader
  Renders the scene in 3 passes:
    - Generate GBuffer with OpenGL
    - Generate final Scene texture with OpenCL using 
       GBuffer from previous pass and geometry (BVH) and 
       lighting information
    - Blit the result of the second pass to the render 
       buffer (openGL)
input
  Manages input from keyboard and mouse. Calls Camera 
  methods to update its position and orientation.
main
  Main method and loop
material
  Stores material properties. Diffuse, ambient, specular... 
mesh
  Set of triangles, material properties, textures
  and its methods for drawing and updating OpenGL shaders.
  A Model is made out of Meshes.
model
  Set of meshes which constitutes an entity.
  The model contains the "ModelMatrix", to translate,
  spin and scale it.
  Has a method for drawing itself (calling each
  mesh draw methods)
modelloader
  Loads a model from a file into a Model object.
  Uses ASSIMP library to import different possible formats and 
  it loads meshes, textures and material properties
pointlight
  Contains properties of a Point Light in a format
  suitable to be shared with OpenCL.
  Stores position, color, attenuation values...
renderengine
  Instantiates a "RenderingMethod" template to render the
  scene using one of the available methods.
  Currently there are two possibilities: Deferred 
  Shader (full OpenGL) or Hybrid Shader (OpenGL+OpenCL)
renderingmethod
  Template to be able to use one of the available methods.  
shaderloader
  Loads a GLSL OpenGL shader from a disk file and
  compiles it.
shaderprogram
  It stores a Shader program and allows to use it.
  During its initialization loads a vertex and a fragment 
  shaders (using ShaderLoader) and creates the program, 
  linking them. 
system
  Contains the timer, input and window objects
texture
  Contains OpenGL texture id and its type 
  (diffuse, specular, normal...)
textureloader
  Loads a texture from disk into memory and converts it
  to RGBA format if it wasn't already.
  Uses FreeImage library
texturemanager
  Loads textures corresponding to ASSIMP materials from disk,
  using "TextureLoader", uploads it to OpenGL GPU memory and 
  returns a "Texture" object with its type and OpenGL id.
  Stores internally already loaded textures to avoid loading a 
  texture more than once. 
timer
  Keeps track of time elapsed between calls to its
 "update" method.
vertex
  Contains a vertex in a format suitable to be passed
  to OpenGL. Stores its position, normal and texture 
  coordinates
window
  Destop window initialization, event polling and swaping
  methods. Uses GLFW3 and GLEW
world
  Main Scene object. Contains its models, lights, 
  cameras, BVH geometry structure and options.
